name: Build and Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ✅ Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # ✅ Debug Runner Architecture
      - name: Debug Runner Architecture
        run: |
          echo "System Architecture:"
          uname -m
          echo "Docker Version:"
          docker version

      # ✅ Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ✅ Set Image Tag (Using Git SHA for versioning)
      - name: Set Image Tag
        id: vars
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/metaverse-frontend:$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # ✅ Build the Docker image from `metaverse/`
      - name: Build Docker Image
        run: docker build -t $IMAGE_TAG -f metaverse/Dockerfile metaverse/

      # ✅ Push the Docker image to DockerHub
      - name: Push Docker Image
        run: docker push $IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # ✅ Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # ✅ Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # ✅ Configure Kubernetes authentication
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          chmod 600 $HOME/.kube/config  # Ensure proper permissions
          kubectl config view

      # ✅ Debug Kubernetes Connection
      - name: Debug Kubernetes Cluster
        run: |
          echo "Verifying Kubernetes Cluster Access..."
          kubectl cluster-info
          kubectl config get-contexts
          kubectl get nodes || echo "⚠️ Warning: Could not retrieve nodes"

      # ✅ Update Kubernetes Deployment Manifest with the new image
      - name: Update Kubernetes Deployment
        run: |
          sed -i "s|image:.*|image: $IMAGE_TAG|g" k8s/deployment.yaml
          echo "Updated k8s/deployment.yaml with new image:"
          cat k8s/deployment.yaml  # Debugging output

      # ✅ Apply Kubernetes manifests from `k8s/`
      - name: Deploy to Kubernetes
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f k8s/ || echo "⚠️ Deployment Failed"

      # ✅ Verify Deployment Status
      - name: Check Deployment
        run: |
          echo "Checking rollout status..."
          kubectl rollout status deployment/metaverse-frontend -n default || echo "⚠️ Rollout failed"
